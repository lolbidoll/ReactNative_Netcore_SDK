//
//  HanselTrackerRn.m
//  AwesomeProject
//
//  Created by Rajeev Rajeshuni on 22/10/19.
//  Copyright Â© 2019 Facebook. All rights reserved.
//

#import "HanselTrackerRn.h"

@implementation HanselTrackerRn {
    BOOL hasListeners;
}

RCT_EXPORT_MODULE();

- (void)startObserving {
    @try {
        hasListeners = YES;
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(sendEvent:) name:FIRE_EVENT_NOTIFICATION object:nil];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in startObserving method in HanselRn bridge.");
    }
}

- (void)stopObserving {
    @try {
        hasListeners = NO;
        [[NSNotificationCenter defaultCenter] removeObserver:self];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in stopObserving method in HanselRn bridge.");
    }
}

- (NSArray<NSString *> *)supportedEvents {
    @try {
        return @[@"HanselRequestSynced",@"HanselActionPerformed",@"HanselInternalEvent",@"HanselDeepLinkListener"];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in supportedEvents method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(getHanselData: (NSString* _Nonnull) eventName andVendor: (NSString* _Nonnull) vendor withProperties: (NSDictionary*_Nullable) properties callback:(RCTResponseSenderBlock)callback) {
    @try {
        [HanselRnUtils returnResult:[HanselTracker getHanselData:eventName andVendor:vendor withProperties:properties] withCallback:callback];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in getHanselData method in HanselTrackerRn bridge.");
    }
}

RCT_EXPORT_METHOD(isUsedInMap: (NSString* _Nonnull) event andVendor: (NSString* _Nonnull) vendor withProperties: (NSDictionary* _Nullable) properties callback:(RCTResponseSenderBlock)callback) {
    @try {
        [HanselRnUtils returnResult:[NSNumber numberWithBool:[HanselTracker isUsedInMap:event andVendor:vendor withProperties:properties]] withCallback:callback];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in isUsedInMap method in HanselTrackerRn bridge.");
    }
}

RCT_EXPORT_METHOD(logEvent: (NSString* _Nonnull) eventName andVendor: (NSString* _Nonnull) vendor withProperties: (NSDictionary* _Nullable) properties callback:(RCTResponseSenderBlock)callback) {
    @try {
        [HanselRnUtils returnResult:[HanselTracker logEvent:eventName andVendor:vendor withProperties:properties] withCallback:callback];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in logEvent method in HanselTrackerRn bridge.");
    }
}

RCT_EXPORT_METHOD(startRequestSyncEvents) {
    @try {
        [[HanselRnSyncStateListener sharedInstance] startSyncEvents];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in startRequestSSyncEvents method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(stopRequestSyncEvents) {
    @try {
        [[HanselRnSyncStateListener sharedInstance] stopSyncEvents];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in stopRequestSyncEvents method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(registerHanselTrackerListener) {
    @try {
        [[HanselRnEventsListener sharedInstance] registerListener];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in registerListener method in HanselTrackerRn bridge.");
    }
}

RCT_EXPORT_METHOD(registerHanselDeeplinkListener) {
    @try {
        [[HanselRnActionListener sharedInstance] registerHanselDeeplinkListener];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in registerHanselActionListenerForAction method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(registerHanselActionListenerWithActionName: (NSString*) action) {
    @try {
        [[HanselRnActionListener sharedInstance] registerHanselActionListenerForAction:action];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in removeHanselActionListenerForAction method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(removeHanselActionListenerForAction: (NSString*) action) {
    @try {
        [[HanselRnActionListener sharedInstance] removeHanselActionListenerForAction:action];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in removeHanselActionListenerForAction method in HanselRn bridge.");
    }
}


RCT_EXPORT_METHOD(deRegisterListener) {
    @try {
        [[HanselRnEventsListener sharedInstance] deRegisterListener];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in deRegisterListener method in HanselTrackerRn bridge.");
    }
}

- (void)sendEvent: (NSNotification*) notification {
    @try {
        if(hasListeners) {
            NSDictionary* userInfo = notification.userInfo;
            [self sendEventWithName:userInfo[NOTIFICATION_EVENT_NAME] body:userInfo[NOTIFICATION_BODY]];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in sendEvent method in HanselRn bridge.");
    }
}

@end

