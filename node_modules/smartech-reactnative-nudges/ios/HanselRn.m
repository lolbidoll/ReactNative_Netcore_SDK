#import "HanselRn.h"
#import "UIView+React.h"

@implementation HanselRn

RCT_EXPORT_MODULE();

RCT_EXPORT_METHOD(getInteractionMaps: (RCTResponseSenderBlock)callback) {
    @try {
        [HanselRnUtils returnResult:[Hansel getMaps] withCallback:callback];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in getMaps method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(setAppFont: (NSString* _Nonnull) fontFamily) {
    @try {
        [Hansel setAppFont:fontFamily];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in setAppFont method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(onSetScreen: (NSString*) screenName) {
    @try {
        dispatch_async(dispatch_get_main_queue(), ^{
            [Hansel setScreen:screenName];
        });
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in setScreen method in HanselRn bridge.");
    }
}

-(void)setHanselIgnoreViewTag:(UIView *)currentView parentsLayerCount:(int)parentsLayerCount andChildLayerIndex:(int)childLayerIndex {
    @try {
        UIView *ignoreView;
        UIView *parentView = currentView;
        
        for (int i=0; i<=parentsLayerCount; i++) {
            if (parentView == nil) {
                break;
            }
            if (parentsLayerCount == i) {
                ignoreView = [[parentView subviews] objectAtIndex:childLayerIndex];
            }else{
                parentView = [[parentView subviews] objectAtIndex:0];
            }
            if (ignoreView != nil) {
                [ignoreView.layer setValue:@(YES) forKey:HANSEL_IGNORE_VIEW_IDENTIFIER];
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in setting Ignore View Tag.");
    }
}

-(void)setHanselIndexViewTag:(UIView *)currentView hanselIndex:(NSString *)hanselIndex andExtraLayers:(int)extraLayers {
    @try {
        UIView *dynamicView = currentView;
        for (int singleLayer = 0; singleLayer < extraLayers; singleLayer++) {
            UIView *parentView =  [dynamicView superview];
            if (parentView != nil) {
                dynamicView = parentView;
            }
            else {
                dynamicView = NULL;
                break;
            }
        }
        if (dynamicView != nil) {
            [Hansel setHanselIndexForView:dynamicView withIndex:hanselIndex];
        }
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in setting Ignore View Tag.");
    }
}

-(void)searchNativeIDView:(NSArray *)subviews {
    @try {
        for (UIView *currentView in subviews) {
            if (currentView) {
                if ([currentView nativeID] != nil) {
                    if ([[currentView nativeID] isEqualToString:@"hansel_ignore_view_overlay"]) {
                        NSArray *values = [ [currentView accessibilityIdentifier] componentsSeparatedByString: @"#"];
                        int parentsLayerCount = [values[0] intValue];
                        int childLayerIndex;
                        if ([values count] < 2) {
                            childLayerIndex = 0;
                        }
                        else {
                            childLayerIndex = [values[1] intValue];
                        }
                        [self setHanselIgnoreViewTag:currentView parentsLayerCount:parentsLayerCount andChildLayerIndex:childLayerIndex];
                    }
                    else if ([[currentView nativeID] isEqualToString:@"hansel_dynamic_view"]) {
                        NSArray *values = [ [currentView accessibilityIdentifier] componentsSeparatedByString: @"#"];
                        NSString *hanselIndex = values[0];
                        int extraLayersCount;
                        if ([values count] < 2) {
                            extraLayersCount = 0;
                        }
                        else {
                            extraLayersCount = [values[1] intValue];
                        }
                        [self setHanselIndexViewTag:currentView hanselIndex:hanselIndex andExtraLayers:extraLayersCount];
                    }
                    else if ([[currentView nativeID] isEqualToString:@"hansel_show_view"]) {
                        [currentView.layer setValue:@(NO) forKey:HANSEL_IGNORE_VIEW_IDENTIFIER];
                    }
                    else {
                        [currentView.layer setValue:@(YES) forKey:HANSEL_IGNORE_VIEW_IDENTIFIER];
                    }
                }
                [self searchNativeIDView:currentView.subviews];
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in identifying native ID.");
    }
}

RCT_EXPORT_METHOD(setNativeID) {
    @try {
        // Delay execution of my block for 0.50 seconds.
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1.0 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
            UIViewController *currentViewController = RCTPresentedViewController();
            [self searchNativeIDView:currentViewController.view.subviews];
        });
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in setNativeID method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(onUnsetScreen) {
    @try {
        dispatch_async(dispatch_get_main_queue(), ^{
            [Hansel unSetScreen];
        });
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in unSetScreen method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(enableDebugLogs) {
    @try {
        [Hansel enableDebugLogs];
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in enableDebugLogs method in HanselRn bridge.");
    }
}

RCT_EXPORT_METHOD(onBackButtonPressed: (RCTResponseSenderBlock)callback) {
    @try {
        dispatch_async(dispatch_get_main_queue(), ^{
            [HanselRnUtils returnResult:[NSNumber numberWithBool:[Hansel onBackButtonPressed]] withCallback:callback];
        });
    } @catch (NSException *exception) {
        NSLog(@"Hansel error: Exception caught in onBackButtonPressed method in HanselRn bridge.");
    }
}

@end
