"use strict";

var _reactNative = require("react-native");
const LINKING_ERROR = `The package 'smartech-push-react-native' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const SmartechEventEmitter = _reactNative.NativeModules.SmartechPushReactEventEmitter ? new _reactNative.NativeEventEmitter(_reactNative.NativeModules.SmartechPushReactEventEmitter) : _reactNative.DeviceEventEmitter;
const SmartechPushReactNative = _reactNative.NativeModules.SmartechPushReactNative ? _reactNative.NativeModules.SmartechPushReactNative : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
function defaultCallback(method, err, res) {
  if (err) {
    console.log('Smartech ' + method + ' default callback error', err);
  } else {
    console.log('Smartech ' + method + ' default callback result', res);
  }
}

// Used to handle callback
function callWithCallback(method, args, callback) {
  if (typeof callback === 'undefined' || callback == null || typeof callback !== 'function') {
    callback = (err, res) => {
      defaultCallback(method, err, res);
    };
  }
  if (args == null) {
    args = [];
  }
  args.push(callback);
  SmartechPushReactNative[method].apply(this, args);
}
const parseNestedJSON = data => {
  try {
    return JSON.parse(data);
  } catch (error) {
    return data; // Return the original string if parsing fails
  }
};
const processNestedData = data => {
  for (const key in data) {
    if (typeof data[key] === 'object' && data[key] !== null) {
      // If the value is an object (nested), call the function recursively
      data[key] = processNestedData(data[key]);
    } else if (typeof data[key] === 'string') {
      // If the value is a string, attempt to parse it as JSON
      data[key] = parseNestedJSON(data[key]);
    } else {
      // Perform any necessary processing for non-string values
      data[key] = String(data[key]).toUpperCase();
    }
  }
  return data;
};
const eventMap = {};
var SmartechReact = {
  // All the constants declared in the Smartech React Bridge.
  SmartechNotificationReceived: SmartechPushReactNative.SmartechNotificationReceived,
  // For legacy support
  SmartechDeeplinkNotification: SmartechPushReactNative.SmartechDeeplinkNotification,
  // This method is used to register listener.
  addListener: function (eventName, handler) {
    if (SmartechEventEmitter) {
      const eventEmitter = SmartechEventEmitter.addListener(eventName, handler);
      eventMap[eventName] = eventEmitter;
    }
  },
  // This method is used to unregister registered listener.
  removeListener: function (eventName) {
    eventMap[eventName].remove();
  },
  /**
   *  This method will be used to handle the deeplink
   *  used to open the app.
   */
  getDeepLinkUrl: function (callback) {
    callWithCallback('getDeepLinkUrl', null, callback);
  },
  /**
   * Exposed method to request the Notification Permission
   * @param : Callback interface for getting status of Notification permission.
  */
  requestNotificationPermission: function (callback) {
    callWithCallback('requestNotificationPermission', null, callback);
  },
  /**
   * Exposed method to update the Notification Permission status
   * @param pnPermissionStatus: status of permission either enabled (1) or
   * disabled (0)
   */
  updateNotificationPermission: function (pnPermissionStatus) {
    SmartechPushReactNative.updateNotificationPermission(pnPermissionStatus);
  },
  // ----- GDPR Methods ----- 

  /**
   * This method is used to opt push notifications.
   * If you call this method then we will opt in or opt out the user of recieving push notifications.
   */
  optPushNotification: function (isPushNotificationOpted) {
    SmartechPushReactNative.optPushNotification(isPushNotificationOpted);
  },
  /**
   * This method is used to get the current status of opt push notification.
   * If you call this method you will get the current status of the tracking which can be used to render the UI at app level.
   */
  hasOptedPushNotification: function (callback) {
    callWithCallback('hasOptedPushNotification', null, callback);
  },
  // ----- Helper Methods ----- 

  /**
   * This method is used to get the device push token used by Smartech SDK.
   * If you call this method you will get the device push token which is used for sending push notification.
   */
  getDevicePushToken: function (callback) {
    callWithCallback('getDevicePushToken', null, callback);
  },
  /**
   * This method is used to set the device push token used by Smartech SDK.
   * If you call this method you will set the device push token which is used for sending push notification.
   */
  setDevicePushToken: function (token) {
    SmartechPushReactNative.setDevicePushToken(token);
  },
  /**
  * This method is used to handle notification by Smartech SDK.
  */
  handlePushNotification: function (notificationData, callback) {
    // const _notificationdata = JSON.parse(notificationData);
    const parsedData = processNestedData(notificationData);
    console.log("processed data :: ", JSON.stringify(parsedData));
    callWithCallback('handlePushNotification', [JSON.stringify(parsedData)], callback);
  },
  registerForPushNotificationWithAuthorizationOptions: function (enableAlert, enableBadge, enableSound) {
    SmartechPushReactNative.registerForPushNotificationWithAuthorizationOptions(enableAlert, enableBadge, enableSound);
  },
  // This method is used to register notification listener.
  addNotificationListener: function (eventName, handler, callback) {
    if (SmartechEventEmitter) {
      const eventEmitter = SmartechEventEmitter.addListener(eventName, handler);
      callback(eventEmitter);
    }
  }
};
module.exports = SmartechReact;
//# sourceMappingURL=index.js.map